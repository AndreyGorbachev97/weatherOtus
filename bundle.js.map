{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://weatherotus/./src/renderCity.js","webpack://weatherotus/./src/loading.js","webpack://weatherotus/./src/constants.js","webpack://weatherotus/./node_modules/ymaps/dist/ymaps.esm.js","webpack://weatherotus/./src/map.js","webpack://weatherotus/./src/getWeatherByCoord.js","webpack://weatherotus/./src/renderCitiesBtn.js","webpack://weatherotus/./src/getCityCoord.js","webpack://weatherotus/./src/getLocation.js","webpack://weatherotus/./src/initWeather.js","webpack://weatherotus/./src/index.js"],"sourcesContent":["export const renderCity = async (city) => {\n  console.log(\"city\", city)\n  const temp = city.main.temp - 273.15;\n  const cityName = city.name;\n  const iconId = city.weather[0].icon;\n  const desc = city.weather[0].description;\n  const container = document.querySelector(\".current-city\")\n  container.innerHTML = \"\"\n\n  const info = document.createElement(\"div\")\n  info.classList = \"info-wether\"\n  const pCityName = document.createElement(\"div\")\n  const bTemp = document.createElement(\"h2\")\n  const pTemp = document.createElement(\"div\")\n  const icon = document.createElement(\"img\")\n  icon.className = \"img\"\n  const pDesc = document.createElement(\"div\")\n\n  icon.src = `https://openweathermap.org/img/w/${iconId}.png`\n  pCityName.innerText = `${cityName}`\n  bTemp.innerText = temp.toFixed(2) > 0 ? `+ ${temp.toFixed(2)}` : temp.toFixed(2)\n  pTemp.innerText = `Температура воздуха составляет ${temp.toFixed(2)} градус(ов)`\n  pDesc.innerText = desc\n\n\n  info.append(bTemp)\n  info.append(pCityName)\n  info.append(pTemp)\n  info.append(pDesc)\n  container.append(icon)\n  container.append(info)\n\n}","export const loading = () => {\n  const container = document.querySelector(\".current-city\")\n  if (container) {\n    container.innerHTML = \"\"\n    const load = document.createElement(\"div\");\n    load.className = \"loading\"\n    load.innerText = \"Загрузка данных...\"\n    container.append(load)\n  }\n\n}","export const apiKey = \"e991634bb051c413efd0e2fe2c8ddff5\"","var ymaps$1 = {\n  load: function load() {\n    var src = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '//api-maps.yandex.ru/2.1/?lang=en_RU';\n\n    var getNsParamValue = function getNsParamValue() {\n      var results = src.match(/[\\\\?&]ns=([^&#]*)/);\n      return results === null ? '' : decodeURIComponent(results[1].replace(/\\+/g, ' '));\n    };\n\n    if (!this.promise) {\n      this.promise = new Promise(function (resolve, reject) {\n        var scriptElement = document.createElement('script');\n        scriptElement.onload = resolve;\n        scriptElement.onerror = reject;\n        scriptElement.type = 'text/javascript';\n        scriptElement.src = src;\n        document.body.appendChild(scriptElement);\n      }).then(function () {\n        var ns = getNsParamValue();\n\n        if (ns && ns !== 'ymaps') {\n          (0, eval)(\"var ymaps = \".concat(ns, \";\"));\n        }\n\n        return new Promise(function (resolve) {\n          return ymaps.ready(resolve);\n        });\n      });\n    }\n\n    return this.promise;\n  }\n};\n\nexport default ymaps$1;\n","import ymaps from 'ymaps';\n\nlet center = [48.8866527839977, 2.34310679732974];\n\nexport const renderMap = (center) => {\n  ymaps\n    .load('https://api-maps.yandex.ru/2.1/?lang=ru_RU')\n    .then(maps => {\n      const map = new maps.Map('map', {\n        center: center,\n        zoom: 13,\n        Placemark: center\n      });\n    })\n    .catch(error => console.log('Failed to load Yandex Maps', error));\n};","import { apiKey } from \"./constants\"\nimport { renderMap } from \"./map\";\n\nexport const getWeatherByCoord = async (lat, lon) => {\n  try {\n    const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&lang=RU&appid=${apiKey}`)\n    const data = await res.json();\n    if (data.cod !== 200) throw new Error(data.message)\n    const map = document.querySelector(\"#map\")\n    map.innerHTML = \"\"\n    renderMap([lat, lon])\n    return data\n  } catch (e) {\n    alert(\"Ошибка HTTP: \" + e);\n  }\n}","import { getCityCoord } from \"./getCityCoord\";\n\nexport const renderCitiesBtn = () => {\n  const container = document.querySelector(\".history-cities\")\n  container.innerHTML = \"\"\n  const store = localStorage.getItem(\"cities\");\n  if (store) {\n    const cities = JSON.parse(store)\n    cities.forEach(item => {\n      const cityElement = document.createElement(\"div\")\n      cityElement.className = \"tag\"\n      cityElement.innerHTML = item\n      cityElement.addEventListener(\"click\", () => getCityCoord(item))\n      container.append(cityElement)\n    })\n  }\n}","import { apiKey } from \"./constants\";\nimport { getWeatherByCoord } from \"./getWeatherByCoord\";\nimport { loading } from \"./loading\";\nimport { renderCitiesBtn } from \"./renderCitiesBtn\";\nimport { renderCity } from \"./renderCity\"\n\nexport const getCityCoord = async (city) => {\n  try {\n    loading()\n    const res = await fetch(`https://api.openweathermap.org/geo/1.0/direct?q=${city}&limit=5&appid=${apiKey}`)\n    const data = await res.json();\n    const store = localStorage.getItem(\"cities\");\n\n    if (store) {\n      let cities = JSON.parse(store)\n      if (cities.length >= 10) {\n        cities = cities.slice(0, 9)\n      }\n      localStorage.setItem(\"cities\", JSON.stringify([city, ...cities]))\n      renderCitiesBtn()\n    } else {\n      localStorage.setItem(\"cities\", JSON.stringify([city]))\n      renderCitiesBtn()\n    }\n\n    if (data[0]) {\n      let { lat, lon } = data[0]\n      const city = await getWeatherByCoord(lat, lon)\n      renderCity(city)\n    }\n\n  } catch (e) {\n    console.error(e);\n  }\n}","import { initWeather } from \"./initWeather\"\n\nexport function getLocation() {\n  if (navigator.geolocation) {\n    navigator.geolocation.getCurrentPosition(initWeather);\n  } else {\n    alert(\"Браузер не поддерживает геолокацию.\")\n  }\n}","import { renderCity } from \"./renderCity\";\nimport { loading } from \"./loading\";\nimport { getWeatherByCoord } from \"./getWeatherByCoord\"\n\nexport function initWeather(position) {\n  loading()\n  getWeatherByCoord(position.coords.latitude, position.coords.longitude)\n    .then((res) => renderCity(res))\n} ","import \"../css/style.css\";\nimport { getLocation } from \"./getLocation\";\nimport { getCityCoord } from \"./getCityCoord\"\nimport { renderCitiesBtn } from \"./renderCitiesBtn\"\nimport { renderMap } from \"./map\"\n\n// Получение геопозиции при входе и отрисовка данных\ngetLocation()\n\n// Вешаем событие на инпут\nconst input = document.querySelector(\".input\")\ninput?.addEventListener(\"change\", (event) => getCityCoord(event.target.value))\n\nrenderCitiesBtn()\n\nexport const sum = (a, b) => a + b"],"names":["renderCity","city","console","log","temp","main","cityName","name","iconId","weather","icon","desc","description","container","document","querySelector","innerHTML","info","createElement","classList","pCityName","bTemp","pTemp","className","pDesc","src","innerText","toFixed","append","loading","load","apiKey","ymaps$1","arguments","length","undefined","getNsParamValue","results","match","decodeURIComponent","replace","this","promise","Promise","resolve","reject","scriptElement","onload","onerror","type","body","appendChild","then","ns","eval","concat","ymaps","ready","renderMap","center","maps","Map","zoom","Placemark","error","i","getWeatherByCoord","lat","lon","fetch","res","json","data","cod","Error","message","alert","renderCitiesBtn","store","localStorage","getItem","JSON","parse","forEach","item","cityElement","addEventListener","getCityCoord","cities","slice","setItem","stringify","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","input","event","target","value"],"sourceRoot":""}